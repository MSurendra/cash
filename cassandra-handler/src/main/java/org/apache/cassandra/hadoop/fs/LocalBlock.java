/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.hadoop.fs;

import org.apache.commons.lang.builder.HashCodeBuilder;

public class LocalBlock  
{

  public String file;
  public long offset;
  public long length;


  public LocalBlock() 
  {
  }

  public LocalBlock(
          String file,
          long offset,
          long length)
  {
    this();
    this.file = file;
    this.offset = offset;
    this.length = length;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LocalBlock(LocalBlock other) {
    if (other.isSetFile()) {
      this.file = other.file;
    }
    this.offset = other.offset;
    this.length = other.length;
  }

  public LocalBlock deepCopy() {
    return new LocalBlock(this);
  }


  public String getFile() {
    return this.file;
  }

  public LocalBlock setFile(String file) {
    this.file = file;
    return this;
  }

  public void unsetFile() {
    this.file = null;
  }

  /** Returns true if field file is set (has been assigned a value) and false otherwise */
  public boolean isSetFile() {
    return this.file != null;
  }

  public void setFileIsSet(boolean value) {
    if (!value) {
      this.file = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }




  public long getLength() {
    return this.length;
  }



  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LocalBlock)
      return this.equals((LocalBlock)that);
    return false;
  }

  public boolean equals(LocalBlock that) {
    if (that == null)
      return false;

    boolean this_present_file = true && this.isSetFile();
    boolean that_present_file = true && that.isSetFile();
    if (this_present_file || that_present_file) {
      if (!(this_present_file && that_present_file))
        return false;
      if (!this.file.equals(that.file))
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_file = true && (isSetFile());
    builder.append(present_file);
    if (present_file)
      builder.append(file);

    boolean present_offset = true;
    builder.append(present_offset);
    if (present_offset)
      builder.append(offset);

    boolean present_length = true;
    builder.append(present_length);
    if (present_length)
      builder.append(length);

    return builder.toHashCode();
  }


  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LocalBlock(");
    boolean first = true;

    sb.append("file:");
    if (this.file == null) {
      sb.append("null");
    } else {
      sb.append(this.file);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    sb.append(")");
    return sb.toString();
  }


}

